{"pages":[{"title":"ABSOLUTE TABLE","text":"2016.09~2016.12 ) 어디서든 자동으로 수평을 맞춰주는 테이블 (ABSOLUTE TABLE) 아두이노를 이용하여, 어디든 땅이 기울어져 있어도 자이로센서와 스텝모터로 다리길이를 조절해 수평을 맞춰주며, 책상의 높낮이를 조절할 수 있음. 구조적설계, 시스템설계, 자이로 센서 계산 기능 구현. – 사용 언어 : C, Arduino 학과내에서 최우수상을 받고, 제10-1933787호 “테이블 및 그의 자동 수평 조정방법” 특허를 내었음.","link":"/about/AbsoluteTable.html"},{"title":"Altruists App","text":"2020.07~2020.11) 이타주의자들 리뉴얼 앱 UNY-ICT(IT모임)에 소속되어 이타주의자들이라는 커뮤니티 및 멘토 질문 서비스의 활용을 위해 리뉴얼해서 앱으로 출시. 커뮤니티 부분의 전반적인 Front-end를 담당. 사용 언어 : React-native, php 팀장급의 멘토분과 함께 애자일(스크럼) 기법을 개발과정에서 적용해보고, 프로젝트의 전반적인 경험과 프로젝트 관리 방법 등의 대해 많은 것을 배웠다. Restful한 API서버와 앱 사이의 통신과 전반적인 서비스 개발과 더울어서 서비스 기획 측면에도 도움을 줄 수 있어 뜻 깊은 경험이었다. 현재 Android와 iOS내에서 출시되어 있고, 지속적으로 업데이트가 이루어지고 있다.","link":"/about/Altruists.html"},{"title":"BIG BROTHERS(ROPE PROJECT)","text":"2020.08~2020.09) 온라인 시험 부정행위 방지 공모전 (빅브라더즈) 코로나시대로 넘어와서 비대면 온라인 시험의 부정행위를 방지하기 위하여, 시험중에는 화면공유가 되어 감독한다. 학생들은 시험을 보는 동안 타임랩스를 찍어두고, 시험이 끝나면 타임랩스 파일과 답안을 같이 제출한다. 감독관은 시험이 끝난 후 학생들의 타임랩스 파일과 답안으로 평가한다. WebRTC 기반의 오픈소스 openvidu를 사용하여, 화면공유 기술을 구현. 기획, 시스템 설계, Back-End Rest API서버를 구현하였음. 사용 언어 : node.js , openvidu(WebRTC), react.js 팀원과 Front와 Back을 나누어 협업하고, git의 활용을 본격적으로 해보면서 많은 것을 배울 수 있었다. 하나의 서비스를 제대로 구현해내기 위해서는 많은 지식이 필요한 것을 알 수 있었다. 소스코드 수상내역 : 2020년도 온라인시험 부정행위방지(ROPE) SW개발 공모전 (대상), 2020.10.26","link":"/about/BigBrothers.html"},{"title":"ICTUS","text":"2017.09~2017.12) 영어단어학습 게임 (ICTUS) 물고기키우기 게임에서 착안하여 학습효과가 있는 게임을 구현. 게임 기획, 시스템 설계, 빌런(방해요소) 제작, 단어txt파일을 불러와서 랜덤으로 출력 사용 언어 : C++, MFC 윈도우프로그래밍 과목 프로젝트 99점을 받았음. 소스코드","link":"/about/Ictus.html"},{"title":"About Me","text":"저는요 기획과 운동을 좋아하는 개발자입니다.기본 원칙속에서 일의 효율을 중시하여, 항상 빠르고 성능이 좋게 만드려고 노력하고 있습니다.조언과 제의는 언제든 환영입니다. 저의 목표는요 세상에 영향력을 행사하는 서비스를 직접 만들어 보고 싶습니다. 제 관심사는요 기획, 설계, 서버, 프로젝트 매니지먼트 입니다. 제가 가진 기술은요 C, Java, Node.js, React.js, React Native, PythonMySQL, MariaDBAlcatel등의 네트워크 장비 수리 및 관리 저는 이런걸 해왔어요 2016.09~2016.12 ) 자동으로 수평을 맞춰주는 테이블 (ABSOLUTE TABLE) 학과내에서 최우수상을 수상 제10-1933787호 “테이블 및 그의 자동 수평 조정방법” 특허를 내었음. 2017.09~2017.12) 영어단어학습 게임 (ICTUS) 소스코드 2018.02~2019.10) 군 복무(네트워크 인프라 업무 수행) 백본, 엣지, 스위치등 네트워크 장비 관리 특수 CCTV, IP Camera등의 장비 수리 및 관리 서버 관리, 서버실 관리 등 2020.03~2020.06) AR 기반의 소셜네트워크서비스 (Pinsesrt) 수상내역 : 2020년도 IT대학 소프트웨어학부 소프트웨어 공모전 (은상), 2020.10.26 소스코드 구동영상 2020.08~2020.09) 온라인 시험 부정행위 방지 공모전 (BigBrothers) 수상내역 : 2020년도 온라인시험 부정행위방지(ROPE) SW개발 공모전 (대상), 2020.10.26 소스코드 2020.07~2020.11) 이타주의자들 리뉴얼 앱 (Altruists App) 2020.09~2020.12) 스파르탄SW 복수/융합전공 튜터링 React.js, Node.js Express, MariaDB 외 웹 서비스의 대한 지식 공유 2020.10 ~ 진행중) 뉴스 빅데이터 타임라인 서비스 (KoreanNewsChronicle) 소스코드","link":"/about/index.html"},{"title":"KoreanNewsChronicle","text":"2020.10 ~ 진행중) 뉴스 빅데이터를 이용한 사건 연대기 서비스 특정기간안에 사건을 ML로 감지하여, 연대기(타임라인)형태로 보여주는 웹 서비스 서비스 기획, 불용어 처리, 형태소분석 및 전처리 사용 언어 : python, React.js, Node.js NLP(자연어 처리)의 전반적인 과정과 토픽추출 모델링의 대한 지식을 터득할 수 있으며, ML을 활용한 웹서비스를 제공하여, 실력을 더욱 늘릴 수 있음. 소스코드","link":"/about/KNC.html"},{"title":"Pinsert","text":"2020.03~2020.06) AR 기반의 소셜네트워크서비스 (Pinsesrt) 특정 장소에 모인 사람들과의 소통을 유도하는 SNS로 AR컨텐츠를 이용하여, 소통하고, 서로의 경험을 공유할수 있는 서비스 서비스 기획, 전체 네비게이션 탭, 사진올리기, 게시글, 댓글, 알림탭 구현, Firebase 적용. 사용 언어 : Android(java), Firebase , ARcore instagram클론코딩을 통해 Front-end의 전반적인 지식을 어느정도 터득할 수 있었음. 소스코드 구동영상 수상내역 : 2020년도 IT대학 소프트웨어학부 소프트웨어 공모전 (은상), 2020.10.26","link":"/about/Pinsert.html"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/12/23/hello-world/"},{"title":"Devlog Start","text":"Roothyo’s Devloghexo와 icarus를 이용해서 블로그를 운영하려고 한다.아직 마크다운도 익숙하지 않고, 고쳐야할 것이 산더미 같지만 천천히 녹여내려고 한다. 이 블로그를 얼마나 많은 사람이 볼 지는 모르겠지만,어떤이에게는 해결하지 못했던 내용을 해결하는 실마리가 되었으면 좋겠고,또 내 자신에게도 한번 더 정리하고 돌이켜 볼 수 있는 일이 되었으면 좋겠다.","link":"/2020/12/23/Devlog/"},{"title":"Data Structure","text":"자료구조 상황과 문맥에 맞게 데이터를 담을 수 있는 적절한 구조를 말하며, 데이터에 편리하게 접근하고 조작하기 위한 방법이다. 자료 구조는 크게 단순 구조와 비단순 구조로 나뉜다. 단순구조는 프로그래밍에서 사용되는 기본 데이터 타입을 의미하며, 비단순 구조는 단순한 데이터를 저장하는 구조가 아니라 여러 데이터를 목적에 맞게 효과적으로 저장하는 자료구조 이며, 선형구조와 비선형 구조로 나뉜다.12* 선형구조 : 저장되는 자료의 전후 관계가 1대1(List, Stack, Queue)* 비선형구조 : 데이터 항목 사이의 관계가 1:n 도는 n:m(Graph, Tree) Array &amp; LinkedList Array자료구조의 기본이라고 할 수 있는 Array에 대해서 보자. Array는 논리적 순서와 물리적 순서가 일치한다. 따라서 index값을 통한 원소 접근이 용이하며, 구현이 쉽다. 단점은 삽입, 삭제등에 대한 연산에 Cost가 높다는 것이다. 삭제의 경우 순서를 맞추기 위해, 뒤의 원소들을 모두 앞으로 Shift연산을 해줘야 하며, 삽입의 경우도 삽입한 인덱스 포함. 그 뒤의 인덱스들에 Shift 연산을 해줘야 한다. Linked ListArray의 삽입/삭제 연산에 대한 비효율성을 극복하고자 등장한 것이 Linked List이다. LinkedList는 논리적으로 순서대로 되어있으나, 물리적으로 순서대로 되어있지 않다. 대신 LinkedList는 각 원소가 다음 index 위치에 해당하는 물리적 주소를 가지고 있다. 그렇기에 삽입/삭제시에는 데이터를 shift할 필요 없이, 해당되는 원소의 물리적 주소만 변경해주면 된다. 하지만 이 같은 특징 때문에 원하는 index를 참조하려면, 1번 index부터 차례대로 접근해야 한다는 비효율성이 있다. Stack &amp; Queue Stack은 선형 자료구조의 일종으로, FILO(First In Last Out)의 대표적인 예시이다. 원소가 먼저 들어간 것이 나중에 나오고, 가장 나중에 들어간 원소가 가장 먼저 나오게 된다. 미로찾기, 괄호 유효성 체크 등에 활용된다. Queue : 선형 자료구조이며, Stack과는 반대로 FIFO(First In First Out)구조이다. 줄을 선다는 뜻과 같게, 먼저 들어간 원소가 가장 먼저 나온다. 작업 우선순위, Heap 구현 등에 사용된다. Tree Tree는 Stack, Queue와는 다르게 비선형 자료구조로, 계층적 구조를 표현하는 자료구조이다. 실제 데이터를 삽입하고 삭제한다는 생각 이전에, 표현에 집중하자. 트리의 구성 요소는 다음과 같다. Node(노드) : 트리를 구성하고 있는 원소 그 자체를 말한다. Edge(간선) : 노드와 노드사이를 연결하고 있는 선을 말한다. Root(루트노드) : 트리에서 최상위 노드를 말한다. Leaf(리프노드) : 트리에서 최하위 노드를 말한다. Internal(가지노드) : 트리에서 최하위 노드를 제외한 모든 노드를 말한다. Level : 노드로 이루어진 각 층 Height : 트리에서 Level의 수 Binary Tree (이진트리) Binary Tree는 Root노드를 포함, Leaf노드를 제외한 모든 노드의 자식이 두 개인 것을 말한다. 공집합 역시 노드로 인정한다. 이진트리에는 모든 Level이 가득 찬 이진트리인 Full Binary Tree(포화 이진 트리)와 위에서 아래로, 왼족에서 오른쪽으로 순서대로 채워진 트리인 Complete Binary Tree(완전 이진 트리)가 있다.(두 트리의 차이점을 알아두면 좋을 것 같다) 배열로 포화 이진트리와 완전 이진트리를 구현했을 때, 노드의 개수 n에 대해서 i번째 노드에 참조“zueyul 자료 구조 정리”참조“hygoogi 자료구조 정리”","link":"/2020/12/27/DataStructure/"},{"title":"Stack &amp; Queue (스택과 큐)","text":"1. 주식가격 초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요. 제한사항 prices의 각 가격은 1 이상 10,000 이하인 자연수입니다. prices의 길이는 2 이상 100,000 이하입니다. 입출력 예 prices return [1, 2, 3, 2, 3] [4, 3, 1, 1, 0] 입출력 예 설명 1초 시점의 ₩1은 끝까지 가격이 떨어지지 않았습니다. 2초 시점의 ₩2은 끝까지 가격이 떨어지지 않았습니다. 3초 시점의 ₩3은 1초뒤에 가격이 떨어집니다. 따라서 1초간 가격이 떨어지지 않은 것으로 봅니다. 4초 시점의 ₩2은 1초간 가격이 떨어지지 않았습니다. 5초 시점의 ₩3은 0초간 가격이 떨어지지 않았습니다. 1234567891011121314151617class Solution { public int[] solution(int[] prices) { int[] answer = new int [prices.length]; for (int i=0; i &lt; prices.length; i++){ for(int j=i ; j&lt;prices.length ; j++){ if (prices[i] &gt; prices[j]){ answer[i] = j-i; break; } } if(answer[i] &lt;= 0){ answer[i] = prices.length-i-1; } } return answer; }} 후기 : 스택을 따로 사용하는 방식을 생각해 봐야할 듯 싶다. 2. 기능개발 3. 다리를 지나는 트럭 4. 프린터 문제 설명일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다. 그렇지 않으면 J를 인쇄합니다.예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다. 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다. 현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요. 제한사항현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다. 입출력 예 priorities location return [2, 1, 3, 2] 2 1 [1, 1, 9, 1, 1, 1] 0 5 입출력 예 설명 예제 #1문제에 나온 예와 같습니다. 예제 #26개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다. 12345678910111213141516171819202122232425import java.util.*;class Solution { public int solution(int[] priorities, int location) { int answer = 1; int len = priorities.length; PriorityQueue&lt;Integer&gt; queue = new PriorityQueue&lt;&gt;(Collections.reverseOrder()); for (int i=0; i&lt;len; i++){ queue.add(priorities[i]); } while(!queue.isEmpty()){ for (int i=0; i&lt;len; i++){ if(priorities[i] == queue.peek()){ if(i == location){ return answer; } queue.poll(); answer++; } } } return answer; }} 후기 : 다시 풀어봐야할 문제이다. 더 좋은 풀이들이 많을 것 같다.참조“코린이의 개발노트”","link":"/2020/12/28/Stack-queue/"}],"tags":[{"name":"스택","slug":"스택","link":"/tags/%EC%8A%A4%ED%83%9D/"},{"name":"큐","slug":"큐","link":"/tags/%ED%81%90/"},{"name":"프로그래머스","slug":"프로그래머스","link":"/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/"},{"name":"Stack","slug":"Stack","link":"/tags/Stack/"},{"name":"Queue","slug":"Queue","link":"/tags/Queue/"},{"name":"Programmers","slug":"Programmers","link":"/tags/Programmers/"},{"name":"Java","slug":"Java","link":"/tags/Java/"}],"categories":[{"name":"normal","slug":"normal","link":"/categories/normal/"},{"name":"Dev","slug":"Dev","link":"/categories/Dev/"}]}